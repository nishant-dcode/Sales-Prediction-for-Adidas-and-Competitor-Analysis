# -*- coding: utf-8 -*-
"""Adidas Data Prepocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T0PS327O7juLiqg15PCZ0J5U8DqvqqdT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv("Adidas US Sales.csv")
data.head(10)

data.info()

data['Invoice Date'] = pd.to_datetime(data['Invoice Date'])
data['Price per Unit'] = data['Price per Unit'].astype(str).str.replace('$','')
data['Units Sold'] = data['Units Sold'].astype(str).str.replace(',','')
data['Total Sales'] = data['Total Sales'].astype(str).str.replace('$','')
data['Total Sales'] = data['Total Sales'].str.replace(',','')
data['Operating Profit'] = data['Operating Profit'].astype(str).str.replace('$','')
data['Operating Profit'] = data['Operating Profit'].str.replace(',','')
data['Price per Unit'] = data['Price per Unit'].astype(float)
data['Units Sold'] = data['Units Sold'].astype(int)
data['Total Sales'] = data['Total Sales'].astype(int)
data['Operating Profit'] = data['Operating Profit'].astype(int)

data.info()

data2 = pd.read_csv("bruh2.csv")

data2.head(20)

la = LabelEncoder()
data2['Retailer'] = la.fit_transform(data['Retailer'])
data2['State'] = la.fit_transform(data['State'])
data2['City'] = la.fit_transform(data['City'])

print(data['Region'].unique())
print(data2['Region'].unique())

print(data['Product'].unique())
print(data2['Product'].unique())

print(data['Sales Method'].unique())
print(data2['Sales Method'].unique())

print(data['Retailer'].unique())
print(data2['Retailer'].unique())

print(data['State'].unique())
print(data2['State'].unique())

print(data['City'].unique())
print(data2['City'].unique())

X = data2[['Region', 'Product', 'Sales Method', 'Price per Unit', 'State', 'City']]
y = data2['Total Sales']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 0)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
print(f'R-squared (R2) Score: {r2}')

model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
print(f'R-squared (R2) Score: {r2}')

model = DecisionTreeRegressor()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
print(f'R-squared (R2) Score: {r2}')

model = RandomForestRegressor()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
print(f'R-squared (R2) Score: {r2}')

new_region = 4 # ['Northeast' 'South' 'West' 'Midwest' 'Southeast'] = [1 2 4 0 3]
new_product = 2 # ["Men's Street Footwear" "Men's Athletic Footwear" "Women's Street Footwear"
# "Women's Athletic Footwear" "Men's Apparel" "Women's Apparel"] = [2 1 5 4 0 3]
new_sales_method = 2 # ['In-store' 'Outlet' 'Online'] = [0 2 1]
new_price_per_unit = 60.0
new_state = 5 # ['New York' 'Texas' 'California' 'Illinois' 'Pennsylvania' 'Nevada'
# 'Colorado' 'Washington' 'Florida' 'Minnesota' 'Montana' 'Tennessee'
# 'Nebraska' 'Alabama' 'Maine' 'Alaska' 'Hawaii' 'Wyoming' 'Virginia'
# 'Michigan' 'Missouri' 'Utah' 'Oregon' 'Louisiana' 'Idaho' 'Arizona'
# 'New Mexico' 'Georgia' 'South Carolina' 'North Carolina' 'Ohio'
# 'Kentucky' 'Mississippi' 'Arkansas' 'Oklahoma' 'Kansas' 'South Dakota'
# 'North Dakota' 'Iowa' 'Wisconsin' 'Indiana' 'West Virginia' 'Maryland'
# 'Delaware' 'New Jersey' 'Connecticut' 'Rhode Island' 'Massachusetts'
# 'Vermont' 'New Hampshire']
# [31 42  4 12 37 27  5 46  8 22 25 41 26  0 18  1 10 49 45 21 24 43 36 17
# 11  2 30  9 39 32 34 16 23  3 35 15 40 33 14 48 13 47 19  7 29  6 38 20
# 44 28]

new_city = 51 # ['New York' 'Houston' 'San Francisco' 'Los Angeles' 'Chicago' 'Dallas'
# 'Philadelphia' 'Las Vegas' 'Denver' 'Seattle' 'Miami' 'Minneapolis'
# 'Billings' 'Knoxville' 'Omaha' 'Birmingham' 'Portland' 'Anchorage'
# 'Honolulu' 'Orlando' 'Albany' 'Cheyenne' 'Richmond' 'Detroit' 'St. Louis'
# 'Salt Lake City' 'New Orleans' 'Boise' 'Phoenix' 'Albuquerque' 'Atlanta'
# 'Charleston' 'Charlotte' 'Columbus' 'Louisville' 'Jackson' 'Little Rock'
# 'Oklahoma City' 'Wichita' 'Sioux Falls' 'Fargo' 'Des Moines' 'Milwaukee'
# 'Indianapolis' 'Baltimore' 'Wilmington' 'Newark' 'Hartford' 'Providence'
# 'Boston' 'Burlington' 'Manchester']
# [35 22 46 28 13 15 40 26 16 47 31 33  5 25 38  6 42  2 21 39  0 12 44 18
# 49 45 34  7 41  1  3 10 11 14 29 24 27 37 50 48 19 17 32 23  4 51 36 20
# 43  8  9 30]

predicted_sales = model.predict([[new_region, new_product, new_sales_method, new_price_per_unit,
                                  new_state, new_city]])
print(f'Predicted Sales for the New Product: {predicted_sales[0]:.2f}')

